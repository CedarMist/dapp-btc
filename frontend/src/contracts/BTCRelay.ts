/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IBtcMirror {
  export type ChainParamsStruct = {
    name: string;
    magic: BigNumberish;
    pubkeyAddrPrefix: BigNumberish;
    scriptAddrPrefix: BigNumberish;
  };

  export type ChainParamsStructOutput = [
    name: string,
    magic: bigint,
    pubkeyAddrPrefix: bigint,
    scriptAddrPrefix: bigint
  ] & {
    name: string;
    magic: bigint;
    pubkeyAddrPrefix: bigint;
    scriptAddrPrefix: bigint;
  };
}

export declare namespace AbstractRelay {
  export type BlockHeaderStruct = {
    previousblockhash: BytesLike;
    merkleroot: BytesLike;
    version: BigNumberish;
    time: BigNumberish;
    bits: BigNumberish;
    nonce: BigNumberish;
  };

  export type BlockHeaderStructOutput = [
    previousblockhash: string,
    merkleroot: string,
    version: bigint,
    time: bigint,
    bits: bigint,
    nonce: bigint
  ] & {
    previousblockhash: string;
    merkleroot: string;
    version: bigint;
    time: bigint;
    bits: bigint;
    nonce: bigint;
  };
}

export interface BTCRelayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getBlockHash"
      | "getBlockHashReversed"
      | "getBtcRelay"
      | "getChainParams"
      | "getLatestBlockHeight"
      | "getLatestBlockTime"
      | "getMinConfirmations"
      | "isTestnet"
      | "startHeight"
      | "submit"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBlockHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockHashReversed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBtcRelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestBlockHeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestBlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinConfirmations",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isTestnet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startHeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submit",
    values: [BigNumberish, AbstractRelay.BlockHeaderStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBlockHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockHashReversed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBtcRelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestBlockHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestBlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isTestnet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export interface BTCRelay extends BaseContract {
  connect(runner?: ContractRunner | null): BTCRelay;
  waitForDeployment(): Promise<this>;

  interface: BTCRelayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getBlockHash: TypedContractMethod<
    [in_height: BigNumberish],
    [string],
    "view"
  >;

  getBlockHashReversed: TypedContractMethod<
    [in_height: BigNumberish],
    [string],
    "view"
  >;

  getBtcRelay: TypedContractMethod<[], [string], "view">;

  getChainParams: TypedContractMethod<
    [],
    [IBtcMirror.ChainParamsStructOutput],
    "view"
  >;

  getLatestBlockHeight: TypedContractMethod<[], [bigint], "view">;

  getLatestBlockTime: TypedContractMethod<[], [bigint], "view">;

  getMinConfirmations: TypedContractMethod<[], [bigint], "view">;

  isTestnet: TypedContractMethod<[], [boolean], "view">;

  startHeight: TypedContractMethod<[], [bigint], "view">;

  submit: TypedContractMethod<
    [in_height: BigNumberish, in_headers: AbstractRelay.BlockHeaderStruct[]],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getBlockHash"
  ): TypedContractMethod<[in_height: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getBlockHashReversed"
  ): TypedContractMethod<[in_height: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getBtcRelay"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getChainParams"
  ): TypedContractMethod<[], [IBtcMirror.ChainParamsStructOutput], "view">;
  getFunction(
    nameOrSignature: "getLatestBlockHeight"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLatestBlockTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinConfirmations"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isTestnet"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "startHeight"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "submit"
  ): TypedContractMethod<
    [in_height: BigNumberish, in_headers: AbstractRelay.BlockHeaderStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  filters: {};
}
