/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { BTCDeposit, BTCDepositInterface } from "../BTCDeposit";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ITxVerifier",
        name: "in_verifier",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC721InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "in_keypairId",
        type: "bytes32",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "in_owner",
        type: "address",
      },
    ],
    name: "create",
    outputs: [
      {
        internalType: "bytes20",
        name: "out_pubkeyAddress",
        type: "bytes20",
      },
      {
        internalType: "bytes32",
        name: "out_keypairId",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "blockNum",
        type: "uint32",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "blockHeader",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "txId",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "txIndex",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "txMerkleProof",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "rawTx",
            type: "bytes",
          },
        ],
        internalType: "struct BtcTxProof",
        name: "inclusionProof",
        type: "tuple",
      },
      {
        internalType: "uint32",
        name: "txOutIx",
        type: "uint32",
      },
      {
        internalType: "bytes32",
        name: "keypairId",
        type: "bytes32",
      },
    ],
    name: "deposit",
    outputs: [
      {
        internalType: "uint64",
        name: "out_sats",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBtcRelay",
    outputs: [
      {
        internalType: "contract IBtcMirror",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "in_keypairId",
        type: "bytes32",
      },
    ],
    name: "getMeta",
    outputs: [
      {
        internalType: "uint64",
        name: "out_burnHeight",
        type: "uint64",
      },
      {
        internalType: "uint64",
        name: "out_sats",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "in_keypairId",
        type: "bytes32",
      },
    ],
    name: "getSecret",
    outputs: [
      {
        internalType: "bytes20",
        name: "out_btcAddress",
        type: "bytes20",
      },
      {
        internalType: "bytes32",
        name: "out_secret",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "in_keypairId",
        type: "bytes32",
      },
    ],
    name: "purge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "in_to",
        type: "address",
      },
      {
        internalType: "bytes32[]",
        name: "in_keypairId_list",
        type: "bytes32[]",
      },
    ],
    name: "safeTransferMany",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

export class BTCDeposit__factory {
  static readonly abi = _abi;
  static createInterface(): BTCDepositInterface {
    return new Interface(_abi) as BTCDepositInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): BTCDeposit {
    return new Contract(address, _abi, runner) as unknown as BTCDeposit;
  }
}
